var ho;
(function (ho) {
    var watch;
    (function (watch_1) {
        var ie8 = !-[1,];
        watch_1.interval = 400;
        function watch(obj, name, handler) {
            !ie8 ? watchIE8(obj, name, handler) : watchNewer(obj, name, handler);
        }
        watch_1.watch = watch;
        function watchNewer(obj, name, handler) {
            var oldval = obj[name];
            var newval = oldval;
            var getter = function () {
                return newval;
            };
            var setter = function (val) {
                oldval = newval;
                newval = val;
                handler.call(obj, name, oldval, val);
            };
            if (delete obj[name]) {
                Object.defineProperty(this, name, {
                    get: getter,
                    set: setter,
                    enumerable: true,
                    configurable: true
                });
            }
            else
                throw "Could not watch property " + name + " on Object " + obj;
        }
        function watchIE8(obj, name, handler) {
            new Watcher(obj, name, handler);
        }
        var Watcher = (function () {
            function Watcher(obj, name, handler) {
                var _this = this;
                this.obj = obj;
                this.name = name;
                this.handler = handler;
                this.oldVal = this.copy(obj[name]);
                setInterval(function () {
                    if (_this.oldVal !== obj[name])
                        _this.handler.call(null, obj, name, _this.oldVal, obj[name]);
                    _this.oldVal = _this.copy(obj[name]);
                }, watch_1.interval);
            }
            Watcher.prototype.copy = function (val) {
                return JSON.parse(JSON.stringify(val));
            };
            return Watcher;
        })();
    })(watch = ho.watch || (ho.watch = {}));
})(ho || (ho = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi90cy93YXRjaC50cyJdLCJuYW1lcyI6WyJobyIsImhvLndhdGNoIiwiaG8ud2F0Y2gud2F0Y2giLCJoby53YXRjaC53YXRjaE5ld2VyIiwiaG8ud2F0Y2gud2F0Y2hJRTgiLCJoby53YXRjaC5XYXRjaGVyIiwiaG8ud2F0Y2guV2F0Y2hlci5jb25zdHJ1Y3RvciIsImhvLndhdGNoLldhdGNoZXIuY29weSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxFQUFFLENBdURSO0FBdkRELFdBQU8sRUFBRTtJQUFDQSxJQUFBQSxLQUFLQSxDQXVEZEE7SUF2RFNBLFdBQUFBLE9BQUtBLEVBQUNBLENBQUNBO1FBQ2hCQyxJQUFNQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQTtRQUNSQSxnQkFBUUEsR0FBV0EsR0FBR0EsQ0FBQ0E7UUFJbENBLGVBQXNCQSxHQUFRQSxFQUFFQSxJQUFZQSxFQUFFQSxPQUFnQkE7WUFDN0RDLENBQUNBLEdBQUdBLEdBQUdBLFFBQVFBLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLEVBQUVBLE9BQU9BLENBQUNBLEdBQUdBLFVBQVVBLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBO1FBQ3RFQSxDQUFDQTtRQUZlRCxhQUFLQSxRQUVwQkEsQ0FBQUE7UUFFREEsb0JBQW9CQSxHQUFRQSxFQUFFQSxJQUFZQSxFQUFFQSxPQUFnQkE7WUFDM0RFLElBQUlBLE1BQU1BLEdBQUdBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ3ZCQSxJQUFJQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFBQTtZQUNuQkEsSUFBSUEsTUFBTUEsR0FBR0E7Z0JBQ1osTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNmLENBQUMsQ0FBQ0E7WUFDRkEsSUFBSUEsTUFBTUEsR0FBR0EsVUFBVUEsR0FBR0E7Z0JBQ3pCLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ2hCLE1BQU0sR0FBRyxHQUFHLENBQUM7Z0JBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN0QyxDQUFDLENBQUNBO1lBRURBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN0QkEsTUFBTUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsRUFBRUE7b0JBQy9CQSxHQUFHQSxFQUFFQSxNQUFNQTtvQkFDWEEsR0FBR0EsRUFBRUEsTUFBTUE7b0JBQ1hBLFVBQVVBLEVBQUVBLElBQUlBO29CQUNoQkEsWUFBWUEsRUFBRUEsSUFBSUE7aUJBQ3BCQSxDQUFDQSxDQUFDQTtZQUNKQSxDQUFDQTtZQUNEQSxJQUFJQTtnQkFDSEEsTUFBTUEsOEJBQTRCQSxJQUFJQSxtQkFBY0EsR0FBS0EsQ0FBQ0E7UUFDN0RBLENBQUNBO1FBRURGLGtCQUFrQkEsR0FBUUEsRUFBRUEsSUFBWUEsRUFBRUEsT0FBZ0JBO1lBQ3pERyxJQUFJQSxPQUFPQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUNqQ0EsQ0FBQ0E7UUFFREg7WUFFQ0ksaUJBQW9CQSxHQUFRQSxFQUFVQSxJQUFZQSxFQUFVQSxPQUFnQkE7Z0JBRjdFQyxpQkFlQ0E7Z0JBYm9CQSxRQUFHQSxHQUFIQSxHQUFHQSxDQUFLQTtnQkFBVUEsU0FBSUEsR0FBSkEsSUFBSUEsQ0FBUUE7Z0JBQVVBLFlBQU9BLEdBQVBBLE9BQU9BLENBQVNBO2dCQUMzRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRW5DQSxXQUFXQSxDQUFDQTtvQkFDWEEsRUFBRUEsQ0FBQUEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsTUFBTUEsS0FBS0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7d0JBQzVCQSxLQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxLQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDM0RBLEtBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEtBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUNyQ0EsQ0FBQ0EsRUFBRUEsZ0JBQVFBLENBQUNBLENBQUNBO1lBQ2RBLENBQUNBO1lBRU9ELHNCQUFJQSxHQUFaQSxVQUFhQSxHQUFRQTtnQkFDcEJFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ3hDQSxDQUFDQTtZQUNGRixjQUFDQTtRQUFEQSxDQUFDQSxBQWZESixJQWVDQTtJQUVGQSxDQUFDQSxFQXZEU0QsS0FBS0EsR0FBTEEsUUFBS0EsS0FBTEEsUUFBS0EsUUF1RGRBO0FBQURBLENBQUNBLEVBdkRNLEVBQUUsS0FBRixFQUFFLFFBdURSIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIGhvLndhdGNoIHtcblx0Y29uc3QgaWU4ID0gIS1bMSxdO1xuXHRleHBvcnQgdmFyIGludGVydmFsOiBudW1iZXIgPSA0MDA7XG5cblx0ZXhwb3J0IHR5cGUgSGFuZGxlciA9IChvYmo6YW55LCBuYW1lOnN0cmluZywgb2xkViwgbmV3Vik9PmFueTtcblxuXHRleHBvcnQgZnVuY3Rpb24gd2F0Y2gob2JqOiBhbnksIG5hbWU6IHN0cmluZywgaGFuZGxlcjogSGFuZGxlcikge1xuXHRcdCFpZTggPyB3YXRjaElFOChvYmosIG5hbWUsIGhhbmRsZXIpIDogd2F0Y2hOZXdlcihvYmosIG5hbWUsIGhhbmRsZXIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gd2F0Y2hOZXdlcihvYmo6IGFueSwgbmFtZTogc3RyaW5nLCBoYW5kbGVyOiBIYW5kbGVyKTogdm9pZCB7XG5cdFx0bGV0IG9sZHZhbCA9IG9ialtuYW1lXTtcblx0XHRsZXQgbmV3dmFsID0gb2xkdmFsXG5cdFx0bGV0IGdldHRlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBuZXd2YWw7XG5cdFx0fTtcblx0XHRsZXQgc2V0dGVyID0gZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0b2xkdmFsID0gbmV3dmFsO1xuXHRcdFx0bmV3dmFsID0gdmFsO1xuXHRcdFx0aGFuZGxlci5jYWxsKG9iaiwgbmFtZSwgb2xkdmFsLCB2YWwpO1xuXHRcdH07XG5cblx0XHRcdGlmIChkZWxldGUgb2JqW25hbWVdKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ICBnZXQ6IGdldHRlclxuXHRcdFx0XHRcdCwgc2V0OiBzZXR0ZXJcblx0XHRcdFx0XHQsIGVudW1lcmFibGU6IHRydWVcblx0XHRcdFx0XHQsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0dGhyb3cgYENvdWxkIG5vdCB3YXRjaCBwcm9wZXJ0eSAke25hbWV9IG9uIE9iamVjdCAke29ian1gO1xuXHR9XG5cblx0ZnVuY3Rpb24gd2F0Y2hJRTgob2JqOiBhbnksIG5hbWU6IHN0cmluZywgaGFuZGxlcjogSGFuZGxlcik6IHZvaWQge1xuXHRcdG5ldyBXYXRjaGVyKG9iaiwgbmFtZSwgaGFuZGxlcik7XG5cdH1cblxuXHRjbGFzcyBXYXRjaGVyIHtcblx0XHRwcml2YXRlIG9sZFZhbDphbnk7XG5cdFx0Y29uc3RydWN0b3IocHJpdmF0ZSBvYmo6IGFueSwgcHJpdmF0ZSBuYW1lOiBzdHJpbmcsIHByaXZhdGUgaGFuZGxlcjogSGFuZGxlcikge1xuXHRcdFx0dGhpcy5vbGRWYWwgPSB0aGlzLmNvcHkob2JqW25hbWVdKTtcblxuXHRcdFx0c2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHRpZih0aGlzLm9sZFZhbCAhPT0gb2JqW25hbWVdKVxuXHRcdFx0XHRcdHRoaXMuaGFuZGxlci5jYWxsKG51bGwsIG9iaiwgbmFtZSwgdGhpcy5vbGRWYWwsIG9ialtuYW1lXSk7XG5cdFx0XHRcdFx0dGhpcy5vbGRWYWwgPSB0aGlzLmNvcHkob2JqW25hbWVdKTtcblx0XHRcdH0sIGludGVydmFsKTtcblx0XHR9XG5cblx0XHRwcml2YXRlIGNvcHkodmFsOiBhbnkpOiBhbnkge1xuXHRcdFx0cmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodmFsKSk7XG5cdFx0fVxuXHR9XG5cbn1cbiJdfQ==