var ho;
(function (ho) {
    var watch;
    (function (watch_1) {
        var ie8 = !-[1,];
        watch_1.interval = 400;
        function watch(obj, name, handler) {
            ie8 ? watchIE8(obj, name, handler) : watchNewer(obj, name, handler);
        }
        watch_1.watch = watch;
        function watchNewer(obj, name, handler) {
            var oldval = obj[name];
            var newval = oldval;
            var getter = function () {
                return newval;
            };
            var setter = function (val) {
                oldval = newval;
                return newval = handler.call(obj, name, oldval, val);
            };
            if (delete obj[name]) {
                Object.defineProperty(this, name, {
                    get: getter,
                    set: setter,
                    enumerable: true,
                    configurable: true
                });
            }
            else
                throw "Could not watch property " + name + " on Object " + obj;
        }
        function watchIE8(obj, name, handler) {
            new Watcher(obj, name, handler);
        }
        var Watcher = (function () {
            function Watcher(obj, name, handler) {
                var _this = this;
                this.obj = obj;
                this.name = name;
                this.handler = handler;
                this.oldVal = this.copy(obj[name]);
                setInterval(function () {
                    if (_this.oldVal !== obj[name])
                        _this.oldVal = _this.handler.call(null, obj, name, _this.oldVal, obj[name]);
                }, watch_1.interval);
            }
            Watcher.prototype.copy = function (val) {
                return JSON.parse(JSON.stringify(val));
            };
            return Watcher;
        })();
    })(watch = ho.watch || (ho.watch = {}));
})(ho || (ho = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi90cy93YXRjaC50cyJdLCJuYW1lcyI6WyJobyIsImhvLndhdGNoIiwiaG8ud2F0Y2gud2F0Y2giLCJoby53YXRjaC53YXRjaE5ld2VyIiwiaG8ud2F0Y2gud2F0Y2hJRTgiLCJoby53YXRjaC5XYXRjaGVyIiwiaG8ud2F0Y2guV2F0Y2hlci5jb25zdHJ1Y3RvciIsImhvLndhdGNoLldhdGNoZXIuY29weSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxFQUFFLENBcURSO0FBckRELFdBQU8sRUFBRTtJQUFDQSxJQUFBQSxLQUFLQSxDQXFEZEE7SUFyRFNBLFdBQUFBLE9BQUtBLEVBQUNBLENBQUNBO1FBQ2hCQyxJQUFNQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQTtRQUNSQSxnQkFBUUEsR0FBV0EsR0FBR0EsQ0FBQ0E7UUFJbENBLGVBQXNCQSxHQUFRQSxFQUFFQSxJQUFZQSxFQUFFQSxPQUFnQkE7WUFDN0RDLEdBQUdBLEdBQUdBLFFBQVFBLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLEVBQUVBLE9BQU9BLENBQUNBLEdBQUdBLFVBQVVBLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLEVBQUVBLE9BQU9BLENBQUNBLENBQUNBO1FBQ3JFQSxDQUFDQTtRQUZlRCxhQUFLQSxRQUVwQkEsQ0FBQUE7UUFFREEsb0JBQW9CQSxHQUFRQSxFQUFFQSxJQUFZQSxFQUFFQSxPQUFnQkE7WUFDM0RFLElBQUlBLE1BQU1BLEdBQUdBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ3ZCQSxJQUFJQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFBQTtZQUNuQkEsSUFBSUEsTUFBTUEsR0FBR0E7Z0JBQ1osTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNmLENBQUMsQ0FBQ0E7WUFDRkEsSUFBSUEsTUFBTUEsR0FBR0EsVUFBVUEsR0FBR0E7Z0JBQ3pCLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ2hCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN0RCxDQUFDLENBQUNBO1lBRURBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN0QkEsTUFBTUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsRUFBRUE7b0JBQy9CQSxHQUFHQSxFQUFFQSxNQUFNQTtvQkFDWEEsR0FBR0EsRUFBRUEsTUFBTUE7b0JBQ1hBLFVBQVVBLEVBQUVBLElBQUlBO29CQUNoQkEsWUFBWUEsRUFBRUEsSUFBSUE7aUJBQ3BCQSxDQUFDQSxDQUFDQTtZQUNKQSxDQUFDQTtZQUNEQSxJQUFJQTtnQkFDSEEsTUFBTUEsOEJBQTRCQSxJQUFJQSxtQkFBY0EsR0FBS0EsQ0FBQ0E7UUFDN0RBLENBQUNBO1FBRURGLGtCQUFrQkEsR0FBUUEsRUFBRUEsSUFBWUEsRUFBRUEsT0FBZ0JBO1lBQ3pERyxJQUFJQSxPQUFPQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUNqQ0EsQ0FBQ0E7UUFFREg7WUFFQ0ksaUJBQW9CQSxHQUFRQSxFQUFVQSxJQUFZQSxFQUFVQSxPQUFnQkE7Z0JBRjdFQyxpQkFjQ0E7Z0JBWm9CQSxRQUFHQSxHQUFIQSxHQUFHQSxDQUFLQTtnQkFBVUEsU0FBSUEsR0FBSkEsSUFBSUEsQ0FBUUE7Z0JBQVVBLFlBQU9BLEdBQVBBLE9BQU9BLENBQVNBO2dCQUMzRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRW5DQSxXQUFXQSxDQUFDQTtvQkFDWEEsRUFBRUEsQ0FBQUEsQ0FBQ0EsS0FBSUEsQ0FBQ0EsTUFBTUEsS0FBS0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7d0JBQzVCQSxLQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxLQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxLQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDM0VBLENBQUNBLEVBQUVBLGdCQUFRQSxDQUFDQSxDQUFDQTtZQUNkQSxDQUFDQTtZQUVPRCxzQkFBSUEsR0FBWkEsVUFBYUEsR0FBUUE7Z0JBQ3BCRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN4Q0EsQ0FBQ0E7WUFDRkYsY0FBQ0E7UUFBREEsQ0FBQ0EsQUFkREosSUFjQ0E7SUFFRkEsQ0FBQ0EsRUFyRFNELEtBQUtBLEdBQUxBLFFBQUtBLEtBQUxBLFFBQUtBLFFBcURkQTtBQUFEQSxDQUFDQSxFQXJETSxFQUFFLEtBQUYsRUFBRSxRQXFEUiIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSBoby53YXRjaCB7XG5cdGNvbnN0IGllOCA9ICEtWzEsXTtcblx0ZXhwb3J0IHZhciBpbnRlcnZhbDogbnVtYmVyID0gNDAwO1xuXG5cdGV4cG9ydCB0eXBlIEhhbmRsZXIgPSAob2JqOmFueSwgbmFtZTpzdHJpbmcsIG9sZFYsIG5ld1YpPT5hbnk7XG5cblx0ZXhwb3J0IGZ1bmN0aW9uIHdhdGNoKG9iajogYW55LCBuYW1lOiBzdHJpbmcsIGhhbmRsZXI6IEhhbmRsZXIpIHtcblx0XHRpZTggPyB3YXRjaElFOChvYmosIG5hbWUsIGhhbmRsZXIpIDogd2F0Y2hOZXdlcihvYmosIG5hbWUsIGhhbmRsZXIpO1xuXHR9XG5cblx0ZnVuY3Rpb24gd2F0Y2hOZXdlcihvYmo6IGFueSwgbmFtZTogc3RyaW5nLCBoYW5kbGVyOiBIYW5kbGVyKTogdm9pZCB7XG5cdFx0bGV0IG9sZHZhbCA9IG9ialtuYW1lXTtcblx0XHRsZXQgbmV3dmFsID0gb2xkdmFsXG5cdFx0bGV0IGdldHRlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBuZXd2YWw7XG5cdFx0fTtcblx0XHRsZXQgc2V0dGVyID0gZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0b2xkdmFsID0gbmV3dmFsO1xuXHRcdFx0cmV0dXJuIG5ld3ZhbCA9IGhhbmRsZXIuY2FsbChvYmosIG5hbWUsIG9sZHZhbCwgdmFsKTtcblx0XHR9O1xuXG5cdFx0XHRpZiAoZGVsZXRlIG9ialtuYW1lXSkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdCAgZ2V0OiBnZXR0ZXJcblx0XHRcdFx0XHQsIHNldDogc2V0dGVyXG5cdFx0XHRcdFx0LCBlbnVtZXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0LCBjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHRocm93IGBDb3VsZCBub3Qgd2F0Y2ggcHJvcGVydHkgJHtuYW1lfSBvbiBPYmplY3QgJHtvYmp9YDtcblx0fVxuXG5cdGZ1bmN0aW9uIHdhdGNoSUU4KG9iajogYW55LCBuYW1lOiBzdHJpbmcsIGhhbmRsZXI6IEhhbmRsZXIpOiB2b2lkIHtcblx0XHRuZXcgV2F0Y2hlcihvYmosIG5hbWUsIGhhbmRsZXIpO1xuXHR9XG5cblx0Y2xhc3MgV2F0Y2hlciB7XG5cdFx0cHJpdmF0ZSBvbGRWYWw6YW55O1xuXHRcdGNvbnN0cnVjdG9yKHByaXZhdGUgb2JqOiBhbnksIHByaXZhdGUgbmFtZTogc3RyaW5nLCBwcml2YXRlIGhhbmRsZXI6IEhhbmRsZXIpIHtcblx0XHRcdHRoaXMub2xkVmFsID0gdGhpcy5jb3B5KG9ialtuYW1lXSk7XG5cblx0XHRcdHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdFx0aWYodGhpcy5vbGRWYWwgIT09IG9ialtuYW1lXSlcblx0XHRcdFx0XHR0aGlzLm9sZFZhbCA9IHRoaXMuaGFuZGxlci5jYWxsKG51bGwsIG9iaiwgbmFtZSwgdGhpcy5vbGRWYWwsIG9ialtuYW1lXSk7XG5cdFx0XHR9LCBpbnRlcnZhbCk7XG5cdFx0fVxuXG5cdFx0cHJpdmF0ZSBjb3B5KHZhbDogYW55KTogYW55IHtcblx0XHRcdHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHZhbCkpO1xuXHRcdH1cblx0fVxuXG59XG4iXX0=