var ho;
(function (ho) {
    var watch;
    (function (watch_1) {
        var ie8 = !-[1,];
        watch_1.interval = 400;
        function watch(obj, name, handler) {
            !ie8 ? watchIE8(obj, name, handler) : watchNewer(obj, name, handler);
        }
        watch_1.watch = watch;
        function watchNewer(obj, name, handler) {
            var oldval = obj[name];
            var newval = oldval;
            var getter = function () {
                return newval;
            };
            var setter = function (val) {
                oldval = newval;
                newval = val;
                handler.call(obj, name, oldval, val);
            };
            if (delete obj[name]) {
                Object.defineProperty(this, name, {
                    get: getter,
                    set: setter,
                    enumerable: true,
                    configurable: true
                });
            }
            else
                throw "Could not watch property " + name + " on Object " + obj;
        }
        function watchIE8(obj, name, handler) {
            new Watcher(obj, name, handler);
        }
        var Watcher = (function () {
            function Watcher(obj, name, handler) {
                this.obj = obj;
                this.name = name;
                this.handler = handler;
                this.oldVal = this.copy(obj[name]);
                this.watch(function () {
                    if (this.oldVal !== obj[name])
                        this.handler.call(null, obj, name, this.oldVal, obj[name]);
                    this.oldVal = this.copy(obj[name]);
                }.bind(this));
            }
            Watcher.prototype.watch = function (cb) {
                var fn = window.requestAnimationFrame ||
                    window.webkitRequestAnimationFrame ||
                    window.mozRequestAnimationFrame ||
                    window.oRequestAnimationFrame ||
                    window.msRequestAnimationFrame ||
                    function (callback) {
                        window.setTimeout(callback, 1000 / 60);
                    };
                var wrap = function () {
                    fn(wrap);
                    cb();
                };
                wrap();
            };
            Watcher.prototype.copy = function (val) {
                return JSON.parse(JSON.stringify(val));
            };
            return Watcher;
        })();
    })(watch = ho.watch || (ho.watch = {}));
})(ho || (ho = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi90cy93YXRjaC50cyJdLCJuYW1lcyI6WyJobyIsImhvLndhdGNoIiwiaG8ud2F0Y2gud2F0Y2giLCJoby53YXRjaC53YXRjaE5ld2VyIiwiaG8ud2F0Y2gud2F0Y2hJRTgiLCJoby53YXRjaC5XYXRjaGVyIiwiaG8ud2F0Y2guV2F0Y2hlci5jb25zdHJ1Y3RvciIsImhvLndhdGNoLldhdGNoZXIud2F0Y2giLCJoby53YXRjaC5XYXRjaGVyLmNvcHkiXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sRUFBRSxDQTRFUjtBQTVFRCxXQUFPLEVBQUU7SUFBQ0EsSUFBQUEsS0FBS0EsQ0E0RWRBO0lBNUVTQSxXQUFBQSxPQUFLQSxFQUFDQSxDQUFDQTtRQUNoQkMsSUFBTUEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDUkEsZ0JBQVFBLEdBQVdBLEdBQUdBLENBQUNBO1FBSWxDQSxlQUFzQkEsR0FBUUEsRUFBRUEsSUFBWUEsRUFBRUEsT0FBZ0JBO1lBQzdEQyxDQUFDQSxHQUFHQSxHQUFHQSxRQUFRQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxPQUFPQSxDQUFDQSxHQUFHQSxVQUFVQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUN0RUEsQ0FBQ0E7UUFGZUQsYUFBS0EsUUFFcEJBLENBQUFBO1FBRURBLG9CQUFvQkEsR0FBUUEsRUFBRUEsSUFBWUEsRUFBRUEsT0FBZ0JBO1lBQzNERSxJQUFJQSxNQUFNQSxHQUFHQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUN2QkEsSUFBSUEsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQUE7WUFDbkJBLElBQUlBLE1BQU1BLEdBQUdBO2dCQUNaLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDZixDQUFDLENBQUNBO1lBQ0ZBLElBQUlBLE1BQU1BLEdBQUdBLFVBQVVBLEdBQUdBO2dCQUN6QixNQUFNLEdBQUcsTUFBTSxDQUFDO2dCQUNoQixNQUFNLEdBQUcsR0FBRyxDQUFDO2dCQUNiLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDdEMsQ0FBQyxDQUFDQTtZQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDdEJBLE1BQU1BLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLEVBQUVBO29CQUMvQkEsR0FBR0EsRUFBRUEsTUFBTUE7b0JBQ1hBLEdBQUdBLEVBQUVBLE1BQU1BO29CQUNYQSxVQUFVQSxFQUFFQSxJQUFJQTtvQkFDaEJBLFlBQVlBLEVBQUVBLElBQUlBO2lCQUNwQkEsQ0FBQ0EsQ0FBQ0E7WUFDSkEsQ0FBQ0E7WUFDREEsSUFBSUE7Z0JBQ0hBLE1BQU1BLDhCQUE0QkEsSUFBSUEsbUJBQWNBLEdBQUtBLENBQUNBO1FBQzdEQSxDQUFDQTtRQUVERixrQkFBa0JBLEdBQVFBLEVBQUVBLElBQVlBLEVBQUVBLE9BQWdCQTtZQUN6REcsSUFBSUEsT0FBT0EsQ0FBQ0EsR0FBR0EsRUFBRUEsSUFBSUEsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDakNBLENBQUNBO1FBRURIO1lBSUNJLGlCQUFvQkEsR0FBUUEsRUFBVUEsSUFBWUEsRUFBVUEsT0FBZ0JBO2dCQUF4REMsUUFBR0EsR0FBSEEsR0FBR0EsQ0FBS0E7Z0JBQVVBLFNBQUlBLEdBQUpBLElBQUlBLENBQVFBO2dCQUFVQSxZQUFPQSxHQUFQQSxPQUFPQSxDQUFTQTtnQkFDM0VBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUVuQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7b0JBQ1YsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQzNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDckMsQ0FBQyxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNmQSxDQUFDQTtZQUVPRCx1QkFBS0EsR0FBYkEsVUFBY0EsRUFBWUE7Z0JBQ3pCRSxJQUFJQSxFQUFFQSxHQUNOQSxNQUFNQSxDQUFDQSxxQkFBcUJBO29CQUMxQkEsTUFBTUEsQ0FBQ0EsMkJBQTJCQTtvQkFDbENBLE1BQU1BLENBQUNBLHdCQUF3QkE7b0JBQy9CQSxNQUFNQSxDQUFDQSxzQkFBc0JBO29CQUM3QkEsTUFBTUEsQ0FBQ0EsdUJBQXVCQTtvQkFDOUJBLFVBQVNBLFFBQWtCQTt3QkFDNUIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUN0QyxDQUFDLENBQUNBO2dCQUVKQSxJQUFJQSxJQUFJQSxHQUFHQTtvQkFDVkEsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ1RBLEVBQUVBLEVBQUVBLENBQUNBO2dCQUNOQSxDQUFDQSxDQUFBQTtnQkFFREEsSUFBSUEsRUFBRUEsQ0FBQ0E7WUFDUkEsQ0FBQ0E7WUFFT0Ysc0JBQUlBLEdBQVpBLFVBQWFBLEdBQVFBO2dCQUNwQkcsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDeENBLENBQUNBO1lBQ0ZILGNBQUNBO1FBQURBLENBQUNBLEFBcENESixJQW9DQ0E7SUFFRkEsQ0FBQ0EsRUE1RVNELEtBQUtBLEdBQUxBLFFBQUtBLEtBQUxBLFFBQUtBLFFBNEVkQTtBQUFEQSxDQUFDQSxFQTVFTSxFQUFFLEtBQUYsRUFBRSxRQTRFUiIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSBoby53YXRjaCB7XG5cdGNvbnN0IGllOCA9ICEtWzEsXTtcblx0ZXhwb3J0IHZhciBpbnRlcnZhbDogbnVtYmVyID0gNDAwO1xuXG5cdGV4cG9ydCB0eXBlIEhhbmRsZXIgPSAob2JqOmFueSwgbmFtZTpzdHJpbmcsIG9sZFYsIG5ld1YpPT5hbnk7XG5cblx0ZXhwb3J0IGZ1bmN0aW9uIHdhdGNoKG9iajogYW55LCBuYW1lOiBzdHJpbmcsIGhhbmRsZXI6IEhhbmRsZXIpIHtcblx0XHQhaWU4ID8gd2F0Y2hJRTgob2JqLCBuYW1lLCBoYW5kbGVyKSA6IHdhdGNoTmV3ZXIob2JqLCBuYW1lLCBoYW5kbGVyKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHdhdGNoTmV3ZXIob2JqOiBhbnksIG5hbWU6IHN0cmluZywgaGFuZGxlcjogSGFuZGxlcik6IHZvaWQge1xuXHRcdGxldCBvbGR2YWwgPSBvYmpbbmFtZV07XG5cdFx0bGV0IG5ld3ZhbCA9IG9sZHZhbFxuXHRcdGxldCBnZXR0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gbmV3dmFsO1xuXHRcdH07XG5cdFx0bGV0IHNldHRlciA9IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRcdG9sZHZhbCA9IG5ld3ZhbDtcblx0XHRcdG5ld3ZhbCA9IHZhbDtcblx0XHRcdGhhbmRsZXIuY2FsbChvYmosIG5hbWUsIG9sZHZhbCwgdmFsKTtcblx0XHR9O1xuXG5cdFx0XHRpZiAoZGVsZXRlIG9ialtuYW1lXSkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdCAgZ2V0OiBnZXR0ZXJcblx0XHRcdFx0XHQsIHNldDogc2V0dGVyXG5cdFx0XHRcdFx0LCBlbnVtZXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0LCBjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHRocm93IGBDb3VsZCBub3Qgd2F0Y2ggcHJvcGVydHkgJHtuYW1lfSBvbiBPYmplY3QgJHtvYmp9YDtcblx0fVxuXG5cdGZ1bmN0aW9uIHdhdGNoSUU4KG9iajogYW55LCBuYW1lOiBzdHJpbmcsIGhhbmRsZXI6IEhhbmRsZXIpOiB2b2lkIHtcblx0XHRuZXcgV2F0Y2hlcihvYmosIG5hbWUsIGhhbmRsZXIpO1xuXHR9XG5cblx0Y2xhc3MgV2F0Y2hlciB7XG5cblx0XHRwcml2YXRlIG9sZFZhbDphbnk7XG5cblx0XHRjb25zdHJ1Y3Rvcihwcml2YXRlIG9iajogYW55LCBwcml2YXRlIG5hbWU6IHN0cmluZywgcHJpdmF0ZSBoYW5kbGVyOiBIYW5kbGVyKSB7XG5cdFx0XHR0aGlzLm9sZFZhbCA9IHRoaXMuY29weShvYmpbbmFtZV0pO1xuXG5cdFx0XHR0aGlzLndhdGNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZih0aGlzLm9sZFZhbCAhPT0gb2JqW25hbWVdKVxuXHRcdFx0XHRcdHRoaXMuaGFuZGxlci5jYWxsKG51bGwsIG9iaiwgbmFtZSwgdGhpcy5vbGRWYWwsIG9ialtuYW1lXSk7XG5cdFx0XHRcdFx0dGhpcy5vbGRWYWwgPSB0aGlzLmNvcHkob2JqW25hbWVdKTtcblx0XHRcdH0uYmluZCh0aGlzKSk7XG5cdFx0fVxuXG5cdFx0cHJpdmF0ZSB3YXRjaChjYjogRnVuY3Rpb24pOiB2b2lkIHtcblx0XHRcdGxldCBmbiA9XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICAgIHx8XG5cdCAgXHRcdHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0ICBcdFx0d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSAgICB8fFxuXHQgIFx0XHR3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgIHx8XG5cdCAgXHRcdHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgfHxcblx0ICBcdFx0ZnVuY3Rpb24oY2FsbGJhY2s6IEZ1bmN0aW9uKXtcblx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XG5cdCAgXHRcdH07XG5cblx0XHRcdGxldCB3cmFwID0gKCkgPT4ge1xuXHRcdFx0XHRmbih3cmFwKTtcblx0XHRcdFx0Y2IoKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcCgpO1xuXHRcdH1cblxuXHRcdHByaXZhdGUgY29weSh2YWw6IGFueSk6IGFueSB7XG5cdFx0XHRyZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YWwpKTtcblx0XHR9XG5cdH1cblxufVxuIl19